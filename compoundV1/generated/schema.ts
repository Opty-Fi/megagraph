// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CTokenData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CTokenData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CTokenData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CTokenData", id.toString(), this);
  }

  static load(id: string): CTokenData | null {
    return store.get("CTokenData", id) as CTokenData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get borrowRatePerBlock(): BigInt | null {
    let value = this.get("borrowRatePerBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowRatePerBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("borrowRatePerBlock");
    } else {
      this.set("borrowRatePerBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get supplyRatePerBlock(): BigInt | null {
    let value = this.get("supplyRatePerBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set supplyRatePerBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("supplyRatePerBlock");
    } else {
      this.set("supplyRatePerBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get exchangeRate(): BigInt | null {
    let value = this.get("exchangeRate");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exchangeRate(value: BigInt | null) {
    if (value === null) {
      this.unset("exchangeRate");
    } else {
      this.set("exchangeRate", Value.fromBigInt(value as BigInt));
    }
  }

  get totalCash(): BigInt | null {
    let value = this.get("totalCash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalCash(value: BigInt | null) {
    if (value === null) {
      this.unset("totalCash");
    } else {
      this.set("totalCash", Value.fromBigInt(value as BigInt));
    }
  }

  get totalBorrows(): BigInt | null {
    let value = this.get("totalBorrows");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrows(value: BigInt | null) {
    if (value === null) {
      this.unset("totalBorrows");
    } else {
      this.set("totalBorrows", Value.fromBigInt(value as BigInt));
    }
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (value === null) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(value as BigInt));
    }
  }

  get totalReserves(): BigInt | null {
    let value = this.get("totalReserves");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalReserves(value: BigInt | null) {
    if (value === null) {
      this.unset("totalReserves");
    } else {
      this.set("totalReserves", Value.fromBigInt(value as BigInt));
    }
  }

  get borrowIndex(): BigInt | null {
    let value = this.get("borrowIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("borrowIndex");
    } else {
      this.set("borrowIndex", Value.fromBigInt(value as BigInt));
    }
  }
}

export class AccrueInterest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AccrueInterest entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccrueInterest entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccrueInterest", id.toString(), this);
  }

  static load(id: string): AccrueInterest | null {
    return store.get("AccrueInterest", id) as AccrueInterest | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cashPrior(): BigInt {
    let value = this.get("cashPrior");
    return value.toBigInt();
  }

  set cashPrior(value: BigInt) {
    this.set("cashPrior", Value.fromBigInt(value));
  }

  get interestAccumulated(): BigInt {
    let value = this.get("interestAccumulated");
    return value.toBigInt();
  }

  set interestAccumulated(value: BigInt) {
    this.set("interestAccumulated", Value.fromBigInt(value));
  }

  get borrowIndex(): BigInt {
    let value = this.get("borrowIndex");
    return value.toBigInt();
  }

  set borrowIndex(value: BigInt) {
    this.set("borrowIndex", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Approval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Approval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Approval", id.toString(), this);
  }

  static load(id: string): Approval | null {
    return store.get("Approval", id) as Approval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Borrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Borrow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Borrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Borrow", id.toString(), this);
  }

  static load(id: string): Borrow | null {
    return store.get("Borrow", id) as Borrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class Failure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Failure entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Failure entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Failure", id.toString(), this);
  }

  static load(id: string): Failure | null {
    return store.get("Failure", id) as Failure | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get error(): BigInt {
    let value = this.get("error");
    return value.toBigInt();
  }

  set error(value: BigInt) {
    this.set("error", Value.fromBigInt(value));
  }

  get info(): BigInt {
    let value = this.get("info");
    return value.toBigInt();
  }

  set info(value: BigInt) {
    this.set("info", Value.fromBigInt(value));
  }

  get detail(): BigInt {
    let value = this.get("detail");
    return value.toBigInt();
  }

  set detail(value: BigInt) {
    this.set("detail", Value.fromBigInt(value));
  }
}

export class LiquidateBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidateBorrow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidateBorrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidateBorrow", id.toString(), this);
  }

  static load(id: string): LiquidateBorrow | null {
    return store.get("LiquidateBorrow", id) as LiquidateBorrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get cTokenCollateral(): Bytes {
    let value = this.get("cTokenCollateral");
    return value.toBytes();
  }

  set cTokenCollateral(value: Bytes) {
    this.set("cTokenCollateral", Value.fromBytes(value));
  }

  get seizeTokens(): BigInt {
    let value = this.get("seizeTokens");
    return value.toBigInt();
  }

  set seizeTokens(value: BigInt) {
    this.set("seizeTokens", Value.fromBigInt(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Mint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Mint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Mint", id.toString(), this);
  }

  static load(id: string): Mint | null {
    return store.get("Mint", id) as Mint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get mintTokens(): BigInt {
    let value = this.get("mintTokens");
    return value.toBigInt();
  }

  set mintTokens(value: BigInt) {
    this.set("mintTokens", Value.fromBigInt(value));
  }
}

export class NewAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewAdmin entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewAdmin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewAdmin", id.toString(), this);
  }

  static load(id: string): NewAdmin | null {
    return store.get("NewAdmin", id) as NewAdmin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class NewComptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewComptroller entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewComptroller entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewComptroller", id.toString(), this);
  }

  static load(id: string): NewComptroller | null {
    return store.get("NewComptroller", id) as NewComptroller | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldComptroller(): Bytes {
    let value = this.get("oldComptroller");
    return value.toBytes();
  }

  set oldComptroller(value: Bytes) {
    this.set("oldComptroller", Value.fromBytes(value));
  }

  get newComptroller(): Bytes {
    let value = this.get("newComptroller");
    return value.toBytes();
  }

  set newComptroller(value: Bytes) {
    this.set("newComptroller", Value.fromBytes(value));
  }
}

export class NewImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewImplementation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewImplementation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewImplementation", id.toString(), this);
  }

  static load(id: string): NewImplementation | null {
    return store.get("NewImplementation", id) as NewImplementation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldImplementation(): Bytes {
    let value = this.get("oldImplementation");
    return value.toBytes();
  }

  set oldImplementation(value: Bytes) {
    this.set("oldImplementation", Value.fromBytes(value));
  }

  get newImplementation(): Bytes {
    let value = this.get("newImplementation");
    return value.toBytes();
  }

  set newImplementation(value: Bytes) {
    this.set("newImplementation", Value.fromBytes(value));
  }
}

export class NewMarketInterestRateModel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NewMarketInterestRateModel entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewMarketInterestRateModel entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewMarketInterestRateModel", id.toString(), this);
  }

  static load(id: string): NewMarketInterestRateModel | null {
    return store.get(
      "NewMarketInterestRateModel",
      id
    ) as NewMarketInterestRateModel | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldInterestRateModel(): Bytes {
    let value = this.get("oldInterestRateModel");
    return value.toBytes();
  }

  set oldInterestRateModel(value: Bytes) {
    this.set("oldInterestRateModel", Value.fromBytes(value));
  }

  get newInterestRateModel(): Bytes {
    let value = this.get("newInterestRateModel");
    return value.toBytes();
  }

  set newInterestRateModel(value: Bytes) {
    this.set("newInterestRateModel", Value.fromBytes(value));
  }
}

export class NewPendingAdmin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewPendingAdmin entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewPendingAdmin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewPendingAdmin", id.toString(), this);
  }

  static load(id: string): NewPendingAdmin | null {
    return store.get("NewPendingAdmin", id) as NewPendingAdmin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingAdmin(): Bytes {
    let value = this.get("oldPendingAdmin");
    return value.toBytes();
  }

  set oldPendingAdmin(value: Bytes) {
    this.set("oldPendingAdmin", Value.fromBytes(value));
  }

  get newPendingAdmin(): Bytes {
    let value = this.get("newPendingAdmin");
    return value.toBytes();
  }

  set newPendingAdmin(value: Bytes) {
    this.set("newPendingAdmin", Value.fromBytes(value));
  }
}

export class NewReserveFactor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewReserveFactor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewReserveFactor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewReserveFactor", id.toString(), this);
  }

  static load(id: string): NewReserveFactor | null {
    return store.get("NewReserveFactor", id) as NewReserveFactor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldReserveFactorMantissa(): BigInt {
    let value = this.get("oldReserveFactorMantissa");
    return value.toBigInt();
  }

  set oldReserveFactorMantissa(value: BigInt) {
    this.set("oldReserveFactorMantissa", Value.fromBigInt(value));
  }

  get newReserveFactorMantissa(): BigInt {
    let value = this.get("newReserveFactorMantissa");
    return value.toBigInt();
  }

  set newReserveFactorMantissa(value: BigInt) {
    this.set("newReserveFactorMantissa", Value.fromBigInt(value));
  }
}

export class Redeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Redeem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Redeem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Redeem", id.toString(), this);
  }

  static load(id: string): Redeem | null {
    return store.get("Redeem", id) as Redeem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get redeemAmount(): BigInt {
    let value = this.get("redeemAmount");
    return value.toBigInt();
  }

  set redeemAmount(value: BigInt) {
    this.set("redeemAmount", Value.fromBigInt(value));
  }

  get redeemTokens(): BigInt {
    let value = this.get("redeemTokens");
    return value.toBigInt();
  }

  set redeemTokens(value: BigInt) {
    this.set("redeemTokens", Value.fromBigInt(value));
  }
}

export class RepayBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RepayBorrow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RepayBorrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RepayBorrow", id.toString(), this);
  }

  static load(id: string): RepayBorrow | null {
    return store.get("RepayBorrow", id) as RepayBorrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get repayAmount(): BigInt {
    let value = this.get("repayAmount");
    return value.toBigInt();
  }

  set repayAmount(value: BigInt) {
    this.set("repayAmount", Value.fromBigInt(value));
  }

  get accountBorrows(): BigInt {
    let value = this.get("accountBorrows");
    return value.toBigInt();
  }

  set accountBorrows(value: BigInt) {
    this.set("accountBorrows", Value.fromBigInt(value));
  }

  get totalBorrows(): BigInt {
    let value = this.get("totalBorrows");
    return value.toBigInt();
  }

  set totalBorrows(value: BigInt) {
    this.set("totalBorrows", Value.fromBigInt(value));
  }
}

export class ReservesAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReservesAdded entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReservesAdded entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReservesAdded", id.toString(), this);
  }

  static load(id: string): ReservesAdded | null {
    return store.get("ReservesAdded", id) as ReservesAdded | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get benefactor(): Bytes {
    let value = this.get("benefactor");
    return value.toBytes();
  }

  set benefactor(value: Bytes) {
    this.set("benefactor", Value.fromBytes(value));
  }

  get addAmount(): BigInt {
    let value = this.get("addAmount");
    return value.toBigInt();
  }

  set addAmount(value: BigInt) {
    this.set("addAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class ReservesReduced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReservesReduced entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReservesReduced entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReservesReduced", id.toString(), this);
  }

  static load(id: string): ReservesReduced | null {
    return store.get("ReservesReduced", id) as ReservesReduced | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get reduceAmount(): BigInt {
    let value = this.get("reduceAmount");
    return value.toBigInt();
  }

  set reduceAmount(value: BigInt) {
    this.set("reduceAmount", Value.fromBigInt(value));
  }

  get newTotalReserves(): BigInt {
    let value = this.get("newTotalReserves");
    return value.toBigInt();
  }

  set newTotalReserves(value: BigInt) {
    this.set("newTotalReserves", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
