// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccrueInterest extends ethereum.Event {
  get params(): AccrueInterest__Params {
    return new AccrueInterest__Params(this);
  }
}

export class AccrueInterest__Params {
  _event: AccrueInterest;

  constructor(event: AccrueInterest) {
    this._event = event;
  }

  get cashPrior(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get interestAccumulated(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get borrowIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get accountBorrows(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Failure extends ethereum.Event {
  get params(): Failure__Params {
    return new Failure__Params(this);
  }
}

export class Failure__Params {
  _event: Failure;

  constructor(event: Failure) {
    this._event = event;
  }

  get error(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get info(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get detail(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidateBorrow extends ethereum.Event {
  get params(): LiquidateBorrow__Params {
    return new LiquidateBorrow__Params(this);
  }
}

export class LiquidateBorrow__Params {
  _event: LiquidateBorrow;

  constructor(event: LiquidateBorrow) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cTokenCollateral(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mintTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewComptroller extends ethereum.Event {
  get params(): NewComptroller__Params {
    return new NewComptroller__Params(this);
  }
}

export class NewComptroller__Params {
  _event: NewComptroller;

  constructor(event: NewComptroller) {
    this._event = event;
  }

  get oldComptroller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newComptroller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewImplementation extends ethereum.Event {
  get params(): NewImplementation__Params {
    return new NewImplementation__Params(this);
  }
}

export class NewImplementation__Params {
  _event: NewImplementation;

  constructor(event: NewImplementation) {
    this._event = event;
  }

  get oldImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewMarketInterestRateModel extends ethereum.Event {
  get params(): NewMarketInterestRateModel__Params {
    return new NewMarketInterestRateModel__Params(this);
  }
}

export class NewMarketInterestRateModel__Params {
  _event: NewMarketInterestRateModel;

  constructor(event: NewMarketInterestRateModel) {
    this._event = event;
  }

  get oldInterestRateModel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newInterestRateModel(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPendingAdmin extends ethereum.Event {
  get params(): NewPendingAdmin__Params {
    return new NewPendingAdmin__Params(this);
  }
}

export class NewPendingAdmin__Params {
  _event: NewPendingAdmin;

  constructor(event: NewPendingAdmin) {
    this._event = event;
  }

  get oldPendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewReserveFactor extends ethereum.Event {
  get params(): NewReserveFactor__Params {
    return new NewReserveFactor__Params(this);
  }
}

export class NewReserveFactor__Params {
  _event: NewReserveFactor;

  constructor(event: NewReserveFactor) {
    this._event = event;
  }

  get oldReserveFactorMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newReserveFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get redeemTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RepayBorrow extends ethereum.Event {
  get params(): RepayBorrow__Params {
    return new RepayBorrow__Params(this);
  }
}

export class RepayBorrow__Params {
  _event: RepayBorrow;

  constructor(event: RepayBorrow) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accountBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ReservesAdded extends ethereum.Event {
  get params(): ReservesAdded__Params {
    return new ReservesAdded__Params(this);
  }
}

export class ReservesAdded__Params {
  _event: ReservesAdded;

  constructor(event: ReservesAdded) {
    this._event = event;
  }

  get benefactor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTotalReserves(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReservesReduced extends ethereum.Event {
  get params(): ReservesReduced__Params {
    return new ReservesReduced__Params(this);
  }
}

export class ReservesReduced__Params {
  _event: ReservesReduced;

  constructor(event: ReservesReduced) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reduceAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTotalReserves(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CToken__getAccountSnapshotResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class CToken extends ethereum.SmartContract {
  static bind(address: Address): CToken {
    return new CToken("CToken", address);
  }

  _acceptAdmin(): BigInt {
    let result = super.call("_acceptAdmin", "_acceptAdmin():(uint256)", []);

    return result[0].toBigInt();
  }

  try__acceptAdmin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_acceptAdmin", "_acceptAdmin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _addReserves(addAmount: BigInt): BigInt {
    let result = super.call("_addReserves", "_addReserves(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(addAmount)
    ]);

    return result[0].toBigInt();
  }

  try__addReserves(addAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_addReserves",
      "_addReserves(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(addAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _reduceReserves(reduceAmount: BigInt): BigInt {
    let result = super.call(
      "_reduceReserves",
      "_reduceReserves(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(reduceAmount)]
    );

    return result[0].toBigInt();
  }

  try__reduceReserves(reduceAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_reduceReserves",
      "_reduceReserves(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(reduceAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setComptroller(newComptroller: Address): BigInt {
    let result = super.call(
      "_setComptroller",
      "_setComptroller(address):(uint256)",
      [ethereum.Value.fromAddress(newComptroller)]
    );

    return result[0].toBigInt();
  }

  try__setComptroller(newComptroller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setComptroller",
      "_setComptroller(address):(uint256)",
      [ethereum.Value.fromAddress(newComptroller)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setInterestRateModel(newInterestRateModel: Address): BigInt {
    let result = super.call(
      "_setInterestRateModel",
      "_setInterestRateModel(address):(uint256)",
      [ethereum.Value.fromAddress(newInterestRateModel)]
    );

    return result[0].toBigInt();
  }

  try__setInterestRateModel(
    newInterestRateModel: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setInterestRateModel",
      "_setInterestRateModel(address):(uint256)",
      [ethereum.Value.fromAddress(newInterestRateModel)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setPendingAdmin(newPendingAdmin: Address): BigInt {
    let result = super.call(
      "_setPendingAdmin",
      "_setPendingAdmin(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingAdmin)]
    );

    return result[0].toBigInt();
  }

  try__setPendingAdmin(newPendingAdmin: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPendingAdmin",
      "_setPendingAdmin(address):(uint256)",
      [ethereum.Value.fromAddress(newPendingAdmin)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setReserveFactor(newReserveFactorMantissa: BigInt): BigInt {
    let result = super.call(
      "_setReserveFactor",
      "_setReserveFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newReserveFactorMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setReserveFactor(
    newReserveFactorMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setReserveFactor",
      "_setReserveFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newReserveFactorMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrualBlockNumber(): BigInt {
    let result = super.call(
      "accrualBlockNumber",
      "accrualBlockNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accrualBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accrualBlockNumber",
      "accrualBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrueInterest(): BigInt {
    let result = super.call("accrueInterest", "accrueInterest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_accrueInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accrueInterest",
      "accrueInterest():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlying(owner: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrow(borrowAmount: BigInt): BigInt {
    let result = super.call("borrow", "borrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(borrowAmount)
    ]);

    return result[0].toBigInt();
  }

  try_borrow(borrowAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrow", "borrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(borrowAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowBalanceCurrent(account: Address): BigInt {
    let result = super.call(
      "borrowBalanceCurrent",
      "borrowBalanceCurrent(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_borrowBalanceCurrent(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowBalanceCurrent",
      "borrowBalanceCurrent(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowBalanceStored(account: Address): BigInt {
    let result = super.call(
      "borrowBalanceStored",
      "borrowBalanceStored(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_borrowBalanceStored(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowBalanceStored",
      "borrowBalanceStored(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowIndex(): BigInt {
    let result = super.call("borrowIndex", "borrowIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_borrowIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrowIndex", "borrowIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowRatePerBlock(): BigInt {
    let result = super.call(
      "borrowRatePerBlock",
      "borrowRatePerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_borrowRatePerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowRatePerBlock",
      "borrowRatePerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  comptroller(): Address {
    let result = super.call("comptroller", "comptroller():(address)", []);

    return result[0].toAddress();
  }

  try_comptroller(): ethereum.CallResult<Address> {
    let result = super.tryCall("comptroller", "comptroller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  delegateToImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToImplementation",
      "delegateToImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  delegateToViewImplementation(data: Bytes): Bytes {
    let result = super.call(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );

    return result[0].toBytes();
  }

  try_delegateToViewImplementation(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "delegateToViewImplementation",
      "delegateToViewImplementation(bytes):(bytes)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  exchangeRateCurrent(): BigInt {
    let result = super.call(
      "exchangeRateCurrent",
      "exchangeRateCurrent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateCurrent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateCurrent",
      "exchangeRateCurrent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateStored(): BigInt {
    let result = super.call(
      "exchangeRateStored",
      "exchangeRateStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateStored",
      "exchangeRateStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountSnapshot(account: Address): CToken__getAccountSnapshotResult {
    let result = super.call(
      "getAccountSnapshot",
      "getAccountSnapshot(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new CToken__getAccountSnapshotResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getAccountSnapshot(
    account: Address
  ): ethereum.CallResult<CToken__getAccountSnapshotResult> {
    let result = super.tryCall(
      "getAccountSnapshot",
      "getAccountSnapshot(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CToken__getAccountSnapshotResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getCash(): BigInt {
    let result = super.call("getCash", "getCash():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCash(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCash", "getCash():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interestRateModel(): Address {
    let result = super.call(
      "interestRateModel",
      "interestRateModel():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_interestRateModel(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestRateModel",
      "interestRateModel():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isCToken(): boolean {
    let result = super.call("isCToken", "isCToken():(bool)", []);

    return result[0].toBoolean();
  }

  try_isCToken(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCToken", "isCToken():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidateBorrow(
    borrower: Address,
    repayAmount: BigInt,
    cTokenCollateral: Address
  ): BigInt {
    let result = super.call(
      "liquidateBorrow",
      "liquidateBorrow(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
        ethereum.Value.fromAddress(cTokenCollateral)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateBorrow(
    borrower: Address,
    repayAmount: BigInt,
    cTokenCollateral: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateBorrow",
      "liquidateBorrow(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount),
        ethereum.Value.fromAddress(cTokenCollateral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(mintAmount: BigInt): BigInt {
    let result = super.call("mint", "mint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(mintAmount)
    ]);

    return result[0].toBigInt();
  }

  try_mint(mintAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(mintAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", "pendingAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingAdmin", "pendingAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeem(redeemTokens: BigInt): BigInt {
    let result = super.call("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(redeemTokens)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(redeemTokens: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(redeemTokens)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlying(redeemAmount: BigInt): BigInt {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(redeemAmount)]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlying(redeemAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(redeemAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayBorrow(repayAmount: BigInt): BigInt {
    let result = super.call("repayBorrow", "repayBorrow(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(repayAmount)
    ]);

    return result[0].toBigInt();
  }

  try_repayBorrow(repayAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayBorrow",
      "repayBorrow(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(repayAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayBorrowBehalf(borrower: Address, repayAmount: BigInt): BigInt {
    let result = super.call(
      "repayBorrowBehalf",
      "repayBorrowBehalf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayBorrowBehalf(
    borrower: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayBorrowBehalf",
      "repayBorrowBehalf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveFactorMantissa(): BigInt {
    let result = super.call(
      "reserveFactorMantissa",
      "reserveFactorMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reserveFactorMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveFactorMantissa",
      "reserveFactorMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seize(liquidator: Address, borrower: Address, seizeTokens: BigInt): BigInt {
    let result = super.call(
      "seize",
      "seize(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_seize(
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seize",
      "seize(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supplyRatePerBlock(): BigInt {
    let result = super.call(
      "supplyRatePerBlock",
      "supplyRatePerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_supplyRatePerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "supplyRatePerBlock",
      "supplyRatePerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBorrows(): BigInt {
    let result = super.call("totalBorrows", "totalBorrows():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBorrows(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBorrows", "totalBorrows():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrowsCurrent(): BigInt {
    let result = super.call(
      "totalBorrowsCurrent",
      "totalBorrowsCurrent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalBorrowsCurrent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowsCurrent",
      "totalBorrowsCurrent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReserves(): BigInt {
    let result = super.call("totalReserves", "totalReserves():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReserves(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReserves",
      "totalReserves():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(dst: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(dst: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(src: Address, dst: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    src: Address,
    dst: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get underlying_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get comptroller_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get interestRateModel_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get initialExchangeRateMantissa_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get name_(): string {
    return this._call.inputValues[4].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[5].value.toString();
  }

  get decimals_(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get admin_(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get implementation_(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get becomeImplementationData(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class _acceptAdminCall extends ethereum.Call {
  get inputs(): _acceptAdminCall__Inputs {
    return new _acceptAdminCall__Inputs(this);
  }

  get outputs(): _acceptAdminCall__Outputs {
    return new _acceptAdminCall__Outputs(this);
  }
}

export class _acceptAdminCall__Inputs {
  _call: _acceptAdminCall;

  constructor(call: _acceptAdminCall) {
    this._call = call;
  }
}

export class _acceptAdminCall__Outputs {
  _call: _acceptAdminCall;

  constructor(call: _acceptAdminCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _addReservesCall extends ethereum.Call {
  get inputs(): _addReservesCall__Inputs {
    return new _addReservesCall__Inputs(this);
  }

  get outputs(): _addReservesCall__Outputs {
    return new _addReservesCall__Outputs(this);
  }
}

export class _addReservesCall__Inputs {
  _call: _addReservesCall;

  constructor(call: _addReservesCall) {
    this._call = call;
  }

  get addAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _addReservesCall__Outputs {
  _call: _addReservesCall;

  constructor(call: _addReservesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _reduceReservesCall extends ethereum.Call {
  get inputs(): _reduceReservesCall__Inputs {
    return new _reduceReservesCall__Inputs(this);
  }

  get outputs(): _reduceReservesCall__Outputs {
    return new _reduceReservesCall__Outputs(this);
  }
}

export class _reduceReservesCall__Inputs {
  _call: _reduceReservesCall;

  constructor(call: _reduceReservesCall) {
    this._call = call;
  }

  get reduceAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _reduceReservesCall__Outputs {
  _call: _reduceReservesCall;

  constructor(call: _reduceReservesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setComptrollerCall extends ethereum.Call {
  get inputs(): _setComptrollerCall__Inputs {
    return new _setComptrollerCall__Inputs(this);
  }

  get outputs(): _setComptrollerCall__Outputs {
    return new _setComptrollerCall__Outputs(this);
  }
}

export class _setComptrollerCall__Inputs {
  _call: _setComptrollerCall;

  constructor(call: _setComptrollerCall) {
    this._call = call;
  }

  get newComptroller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setComptrollerCall__Outputs {
  _call: _setComptrollerCall;

  constructor(call: _setComptrollerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setImplementationCall extends ethereum.Call {
  get inputs(): _setImplementationCall__Inputs {
    return new _setImplementationCall__Inputs(this);
  }

  get outputs(): _setImplementationCall__Outputs {
    return new _setImplementationCall__Outputs(this);
  }
}

export class _setImplementationCall__Inputs {
  _call: _setImplementationCall;

  constructor(call: _setImplementationCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowResign(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get becomeImplementationData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class _setImplementationCall__Outputs {
  _call: _setImplementationCall;

  constructor(call: _setImplementationCall) {
    this._call = call;
  }
}

export class _setInterestRateModelCall extends ethereum.Call {
  get inputs(): _setInterestRateModelCall__Inputs {
    return new _setInterestRateModelCall__Inputs(this);
  }

  get outputs(): _setInterestRateModelCall__Outputs {
    return new _setInterestRateModelCall__Outputs(this);
  }
}

export class _setInterestRateModelCall__Inputs {
  _call: _setInterestRateModelCall;

  constructor(call: _setInterestRateModelCall) {
    this._call = call;
  }

  get newInterestRateModel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setInterestRateModelCall__Outputs {
  _call: _setInterestRateModelCall;

  constructor(call: _setInterestRateModelCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setPendingAdminCall extends ethereum.Call {
  get inputs(): _setPendingAdminCall__Inputs {
    return new _setPendingAdminCall__Inputs(this);
  }

  get outputs(): _setPendingAdminCall__Outputs {
    return new _setPendingAdminCall__Outputs(this);
  }
}

export class _setPendingAdminCall__Inputs {
  _call: _setPendingAdminCall;

  constructor(call: _setPendingAdminCall) {
    this._call = call;
  }

  get newPendingAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPendingAdminCall__Outputs {
  _call: _setPendingAdminCall;

  constructor(call: _setPendingAdminCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setReserveFactorCall extends ethereum.Call {
  get inputs(): _setReserveFactorCall__Inputs {
    return new _setReserveFactorCall__Inputs(this);
  }

  get outputs(): _setReserveFactorCall__Outputs {
    return new _setReserveFactorCall__Outputs(this);
  }
}

export class _setReserveFactorCall__Inputs {
  _call: _setReserveFactorCall;

  constructor(call: _setReserveFactorCall) {
    this._call = call;
  }

  get newReserveFactorMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setReserveFactorCall__Outputs {
  _call: _setReserveFactorCall;

  constructor(call: _setReserveFactorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BalanceOfUnderlyingCall extends ethereum.Call {
  get inputs(): BalanceOfUnderlyingCall__Inputs {
    return new BalanceOfUnderlyingCall__Inputs(this);
  }

  get outputs(): BalanceOfUnderlyingCall__Outputs {
    return new BalanceOfUnderlyingCall__Outputs(this);
  }
}

export class BalanceOfUnderlyingCall__Inputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BalanceOfUnderlyingCall__Outputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowBalanceCurrentCall extends ethereum.Call {
  get inputs(): BorrowBalanceCurrentCall__Inputs {
    return new BorrowBalanceCurrentCall__Inputs(this);
  }

  get outputs(): BorrowBalanceCurrentCall__Outputs {
    return new BorrowBalanceCurrentCall__Outputs(this);
  }
}

export class BorrowBalanceCurrentCall__Inputs {
  _call: BorrowBalanceCurrentCall;

  constructor(call: BorrowBalanceCurrentCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BorrowBalanceCurrentCall__Outputs {
  _call: BorrowBalanceCurrentCall;

  constructor(call: BorrowBalanceCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateToImplementationCall extends ethereum.Call {
  get inputs(): DelegateToImplementationCall__Inputs {
    return new DelegateToImplementationCall__Inputs(this);
  }

  get outputs(): DelegateToImplementationCall__Outputs {
    return new DelegateToImplementationCall__Outputs(this);
  }
}

export class DelegateToImplementationCall__Inputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DelegateToImplementationCall__Outputs {
  _call: DelegateToImplementationCall;

  constructor(call: DelegateToImplementationCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExchangeRateCurrentCall extends ethereum.Call {
  get inputs(): ExchangeRateCurrentCall__Inputs {
    return new ExchangeRateCurrentCall__Inputs(this);
  }

  get outputs(): ExchangeRateCurrentCall__Outputs {
    return new ExchangeRateCurrentCall__Outputs(this);
  }
}

export class ExchangeRateCurrentCall__Inputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }
}

export class ExchangeRateCurrentCall__Outputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateBorrowCall extends ethereum.Call {
  get inputs(): LiquidateBorrowCall__Inputs {
    return new LiquidateBorrowCall__Inputs(this);
  }

  get outputs(): LiquidateBorrowCall__Outputs {
    return new LiquidateBorrowCall__Outputs(this);
  }
}

export class LiquidateBorrowCall__Inputs {
  _call: LiquidateBorrowCall;

  constructor(call: LiquidateBorrowCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LiquidateBorrowCall__Outputs {
  _call: LiquidateBorrowCall;

  constructor(call: LiquidateBorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayBorrowCall extends ethereum.Call {
  get inputs(): RepayBorrowCall__Inputs {
    return new RepayBorrowCall__Inputs(this);
  }

  get outputs(): RepayBorrowCall__Outputs {
    return new RepayBorrowCall__Outputs(this);
  }
}

export class RepayBorrowCall__Inputs {
  _call: RepayBorrowCall;

  constructor(call: RepayBorrowCall) {
    this._call = call;
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayBorrowCall__Outputs {
  _call: RepayBorrowCall;

  constructor(call: RepayBorrowCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayBorrowBehalfCall extends ethereum.Call {
  get inputs(): RepayBorrowBehalfCall__Inputs {
    return new RepayBorrowBehalfCall__Inputs(this);
  }

  get outputs(): RepayBorrowBehalfCall__Outputs {
    return new RepayBorrowBehalfCall__Outputs(this);
  }
}

export class RepayBorrowBehalfCall__Inputs {
  _call: RepayBorrowBehalfCall;

  constructor(call: RepayBorrowBehalfCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayBorrowBehalfCall__Outputs {
  _call: RepayBorrowBehalfCall;

  constructor(call: RepayBorrowBehalfCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SeizeCall extends ethereum.Call {
  get inputs(): SeizeCall__Inputs {
    return new SeizeCall__Inputs(this);
  }

  get outputs(): SeizeCall__Outputs {
    return new SeizeCall__Outputs(this);
  }
}

export class SeizeCall__Inputs {
  _call: SeizeCall;

  constructor(call: SeizeCall) {
    this._call = call;
  }

  get liquidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SeizeCall__Outputs {
  _call: SeizeCall;

  constructor(call: SeizeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TotalBorrowsCurrentCall extends ethereum.Call {
  get inputs(): TotalBorrowsCurrentCall__Inputs {
    return new TotalBorrowsCurrentCall__Inputs(this);
  }

  get outputs(): TotalBorrowsCurrentCall__Outputs {
    return new TotalBorrowsCurrentCall__Outputs(this);
  }
}

export class TotalBorrowsCurrentCall__Inputs {
  _call: TotalBorrowsCurrentCall;

  constructor(call: TotalBorrowsCurrentCall) {
    this._call = call;
  }
}

export class TotalBorrowsCurrentCall__Outputs {
  _call: TotalBorrowsCurrentCall;

  constructor(call: TotalBorrowsCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
