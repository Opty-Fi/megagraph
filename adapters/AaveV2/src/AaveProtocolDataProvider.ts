// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AaveProtocolDataProvider__getAllATokensResultValue0Struct extends ethereum.Tuple {
  get symbol(): string {
    return this[0].toString();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }
}

export class AaveProtocolDataProvider__getAllReservesTokensResultValue0Struct extends ethereum.Tuple {
  get symbol(): string {
    return this[0].toString();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }
}

export class AaveProtocolDataProvider__getReserveConfigurationDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: boolean;
  value7: boolean;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: boolean,
    value7: boolean,
    value8: boolean,
    value9: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }
}

export class AaveProtocolDataProvider__getReserveDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class AaveProtocolDataProvider__getReserveTokensAddressesResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class AaveProtocolDataProvider__getUserReserveDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }
}

export class AaveProtocolDataProvider extends ethereum.SmartContract {
  static bind(address: Address): AaveProtocolDataProvider {
    return new AaveProtocolDataProvider("AaveProtocolDataProvider", address);
  }

  ADDRESSES_PROVIDER(): Address {
    let result = super.call(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESSES_PROVIDER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllATokens(): Array<
    AaveProtocolDataProvider__getAllATokensResultValue0Struct
  > {
    let result = super.call(
      "getAllATokens",
      "getAllATokens():((string,address)[])",
      []
    );

    return result[0].toTupleArray<
      AaveProtocolDataProvider__getAllATokensResultValue0Struct
    >();
  }

  try_getAllATokens(): ethereum.CallResult<
    Array<AaveProtocolDataProvider__getAllATokensResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllATokens",
      "getAllATokens():((string,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        AaveProtocolDataProvider__getAllATokensResultValue0Struct
      >()
    );
  }

  getAllReservesTokens(): Array<
    AaveProtocolDataProvider__getAllReservesTokensResultValue0Struct
  > {
    let result = super.call(
      "getAllReservesTokens",
      "getAllReservesTokens():((string,address)[])",
      []
    );

    return result[0].toTupleArray<
      AaveProtocolDataProvider__getAllReservesTokensResultValue0Struct
    >();
  }

  try_getAllReservesTokens(): ethereum.CallResult<
    Array<AaveProtocolDataProvider__getAllReservesTokensResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllReservesTokens",
      "getAllReservesTokens():((string,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        AaveProtocolDataProvider__getAllReservesTokensResultValue0Struct
      >()
    );
  }

  getReserveConfigurationData(
    asset: Address
  ): AaveProtocolDataProvider__getReserveConfigurationDataResult {
    let result = super.call(
      "getReserveConfigurationData",
      "getReserveConfigurationData(address):(uint256,uint256,uint256,uint256,uint256,bool,bool,bool,bool,bool)",
      [ethereum.Value.fromAddress(asset)]
    );

    return new AaveProtocolDataProvider__getReserveConfigurationDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBoolean(),
      result[7].toBoolean(),
      result[8].toBoolean(),
      result[9].toBoolean()
    );
  }

  try_getReserveConfigurationData(
    asset: Address
  ): ethereum.CallResult<
    AaveProtocolDataProvider__getReserveConfigurationDataResult
  > {
    let result = super.tryCall(
      "getReserveConfigurationData",
      "getReserveConfigurationData(address):(uint256,uint256,uint256,uint256,uint256,bool,bool,bool,bool,bool)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveProtocolDataProvider__getReserveConfigurationDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBoolean(),
        value[7].toBoolean(),
        value[8].toBoolean(),
        value[9].toBoolean()
      )
    );
  }

  getReserveData(
    asset: Address
  ): AaveProtocolDataProvider__getReserveDataResult {
    let result = super.call(
      "getReserveData",
      "getReserveData(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint40)",
      [ethereum.Value.fromAddress(asset)]
    );

    return new AaveProtocolDataProvider__getReserveDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_getReserveData(
    asset: Address
  ): ethereum.CallResult<AaveProtocolDataProvider__getReserveDataResult> {
    let result = super.tryCall(
      "getReserveData",
      "getReserveData(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint40)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveProtocolDataProvider__getReserveDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  getReserveTokensAddresses(
    asset: Address
  ): AaveProtocolDataProvider__getReserveTokensAddressesResult {
    let result = super.call(
      "getReserveTokensAddresses",
      "getReserveTokensAddresses(address):(address,address,address)",
      [ethereum.Value.fromAddress(asset)]
    );

    return new AaveProtocolDataProvider__getReserveTokensAddressesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_getReserveTokensAddresses(
    asset: Address
  ): ethereum.CallResult<
    AaveProtocolDataProvider__getReserveTokensAddressesResult
  > {
    let result = super.tryCall(
      "getReserveTokensAddresses",
      "getReserveTokensAddresses(address):(address,address,address)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveProtocolDataProvider__getReserveTokensAddressesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  getUserReserveData(
    asset: Address,
    user: Address
  ): AaveProtocolDataProvider__getUserReserveDataResult {
    let result = super.call(
      "getUserReserveData",
      "getUserReserveData(address,address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint40,bool)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(user)]
    );

    return new AaveProtocolDataProvider__getUserReserveDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try_getUserReserveData(
    asset: Address,
    user: Address
  ): ethereum.CallResult<AaveProtocolDataProvider__getUserReserveDataResult> {
    let result = super.tryCall(
      "getUserReserveData",
      "getUserReserveData(address,address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint40,bool)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AaveProtocolDataProvider__getUserReserveDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get addressesProvider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
