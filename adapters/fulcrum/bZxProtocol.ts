// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class bZxProtocol__borrowerOrdersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class bZxProtocol__lenderInterestResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class bZxProtocol__lenderOrdersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class bZxProtocol__loanInterestResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class bZxProtocol__loanParamsResult {
  value0: Bytes;
  value1: boolean;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Bytes,
    value1: boolean,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class bZxProtocol__loansResult {
  value0: Bytes;
  value1: Bytes;
  value2: Bytes;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: Address;
  value10: Address;
  value11: boolean;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: Bytes,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: Address,
    value10: Address,
    value11: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    map.set("value11", ethereum.Value.fromBoolean(this.value11));
    return map;
  }
}

export class bZxProtocol extends ethereum.SmartContract {
  static bind(address: Address): bZxProtocol {
    return new bZxProtocol("bZxProtocol", address);
  }

  affiliateFeePercent(): BigInt {
    let result = super.call(
      "affiliateFeePercent",
      "affiliateFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_affiliateFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "affiliateFeePercent",
      "affiliateFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowerOrders(
    param0: Address,
    param1: Bytes
  ): bZxProtocol__borrowerOrdersResult {
    let result = super.call(
      "borrowerOrders",
      "borrowerOrders(address,bytes32):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new bZxProtocol__borrowerOrdersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_borrowerOrders(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<bZxProtocol__borrowerOrdersResult> {
    let result = super.tryCall(
      "borrowerOrders",
      "borrowerOrders(address,bytes32):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bZxProtocol__borrowerOrdersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  borrowingFeePercent(): BigInt {
    let result = super.call(
      "borrowingFeePercent",
      "borrowingFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_borrowingFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowingFeePercent",
      "borrowingFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowingFeeTokensHeld(param0: Address): BigInt {
    let result = super.call(
      "borrowingFeeTokensHeld",
      "borrowingFeeTokensHeld(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_borrowingFeeTokensHeld(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowingFeeTokensHeld",
      "borrowingFeeTokensHeld(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowingFeeTokensPaid(param0: Address): BigInt {
    let result = super.call(
      "borrowingFeeTokensPaid",
      "borrowingFeeTokensPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_borrowingFeeTokensPaid(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowingFeeTokensPaid",
      "borrowingFeeTokensPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bzrxTokenAddress(): Address {
    let result = super.call(
      "bzrxTokenAddress",
      "bzrxTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bzrxTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bzrxTokenAddress",
      "bzrxTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  delegatedManagers(param0: Bytes, param1: Address): boolean {
    let result = super.call(
      "delegatedManagers",
      "delegatedManagers(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_delegatedManagers(
    param0: Bytes,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "delegatedManagers",
      "delegatedManagers(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feesController(): Address {
    let result = super.call("feesController", "feesController():(address)", []);

    return result[0].toAddress();
  }

  try_feesController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feesController",
      "feesController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTarget(sig: string): Address {
    let result = super.call("getTarget", "getTarget(string):(address)", [
      ethereum.Value.fromString(sig)
    ]);

    return result[0].toAddress();
  }

  try_getTarget(sig: string): ethereum.CallResult<Address> {
    let result = super.tryCall("getTarget", "getTarget(string):(address)", [
      ethereum.Value.fromString(sig)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lenderInterest(
    param0: Address,
    param1: Address
  ): bZxProtocol__lenderInterestResult {
    let result = super.call(
      "lenderInterest",
      "lenderInterest(address,address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new bZxProtocol__lenderInterestResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_lenderInterest(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<bZxProtocol__lenderInterestResult> {
    let result = super.tryCall(
      "lenderInterest",
      "lenderInterest(address,address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bZxProtocol__lenderInterestResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  lenderOrders(
    param0: Address,
    param1: Bytes
  ): bZxProtocol__lenderOrdersResult {
    let result = super.call(
      "lenderOrders",
      "lenderOrders(address,bytes32):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new bZxProtocol__lenderOrdersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_lenderOrders(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<bZxProtocol__lenderOrdersResult> {
    let result = super.tryCall(
      "lenderOrders",
      "lenderOrders(address,bytes32):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bZxProtocol__lenderOrdersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  lendingFeePercent(): BigInt {
    let result = super.call(
      "lendingFeePercent",
      "lendingFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lendingFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lendingFeePercent",
      "lendingFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lendingFeeTokensHeld(param0: Address): BigInt {
    let result = super.call(
      "lendingFeeTokensHeld",
      "lendingFeeTokensHeld(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lendingFeeTokensHeld(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lendingFeeTokensHeld",
      "lendingFeeTokensHeld(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lendingFeeTokensPaid(param0: Address): BigInt {
    let result = super.call(
      "lendingFeeTokensPaid",
      "lendingFeeTokensPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lendingFeeTokensPaid(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lendingFeeTokensPaid",
      "lendingFeeTokensPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationIncentivePercent(param0: Address): BigInt {
    let result = super.call(
      "liquidationIncentivePercent",
      "liquidationIncentivePercent(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_liquidationIncentivePercent(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationIncentivePercent",
      "liquidationIncentivePercent(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanInterest(param0: Bytes): bZxProtocol__loanInterestResult {
    let result = super.call(
      "loanInterest",
      "loanInterest(bytes32):(uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new bZxProtocol__loanInterestResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_loanInterest(
    param0: Bytes
  ): ethereum.CallResult<bZxProtocol__loanInterestResult> {
    let result = super.tryCall(
      "loanInterest",
      "loanInterest(bytes32):(uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bZxProtocol__loanInterestResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  loanParams(param0: Bytes): bZxProtocol__loanParamsResult {
    let result = super.call(
      "loanParams",
      "loanParams(bytes32):(bytes32,bool,address,address,address,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new bZxProtocol__loanParamsResult(
      result[0].toBytes(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_loanParams(
    param0: Bytes
  ): ethereum.CallResult<bZxProtocol__loanParamsResult> {
    let result = super.tryCall(
      "loanParams",
      "loanParams(bytes32):(bytes32,bool,address,address,address,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bZxProtocol__loanParamsResult(
        value[0].toBytes(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  loanPoolToUnderlying(param0: Address): Address {
    let result = super.call(
      "loanPoolToUnderlying",
      "loanPoolToUnderlying(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_loanPoolToUnderlying(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "loanPoolToUnderlying",
      "loanPoolToUnderlying(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  loans(param0: Bytes): bZxProtocol__loansResult {
    let result = super.call(
      "loans",
      "loans(bytes32):(bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new bZxProtocol__loansResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toAddress(),
      result[10].toAddress(),
      result[11].toBoolean()
    );
  }

  try_loans(param0: Bytes): ethereum.CallResult<bZxProtocol__loansResult> {
    let result = super.tryCall(
      "loans",
      "loans(bytes32):(bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bZxProtocol__loansResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toAddress(),
        value[10].toAddress(),
        value[11].toBoolean()
      )
    );
  }

  logicTargets(param0: Bytes): Address {
    let result = super.call("logicTargets", "logicTargets(bytes4):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_logicTargets(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "logicTargets",
      "logicTargets(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxDisagreement(): BigInt {
    let result = super.call(
      "maxDisagreement",
      "maxDisagreement():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxDisagreement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxDisagreement",
      "maxDisagreement():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxSwapSize(): BigInt {
    let result = super.call("maxSwapSize", "maxSwapSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSwapSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSwapSize", "maxSwapSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeeds(): Address {
    let result = super.call("priceFeeds", "priceFeeds():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeeds(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeeds", "priceFeeds():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolTokenHeld(): BigInt {
    let result = super.call(
      "protocolTokenHeld",
      "protocolTokenHeld():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolTokenHeld(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolTokenHeld",
      "protocolTokenHeld():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolTokenPaid(): BigInt {
    let result = super.call(
      "protocolTokenPaid",
      "protocolTokenPaid():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolTokenPaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolTokenPaid",
      "protocolTokenPaid():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sourceBufferPercent(): BigInt {
    let result = super.call(
      "sourceBufferPercent",
      "sourceBufferPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sourceBufferPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sourceBufferPercent",
      "sourceBufferPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportedTokens(param0: Address): boolean {
    let result = super.call(
      "supportedTokens",
      "supportedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_supportedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportedTokens",
      "supportedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapsImpl(): Address {
    let result = super.call("swapsImpl", "swapsImpl():(address)", []);

    return result[0].toAddress();
  }

  try_swapsImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapsImpl", "swapsImpl():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tradingFeePercent(): BigInt {
    let result = super.call(
      "tradingFeePercent",
      "tradingFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tradingFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tradingFeePercent",
      "tradingFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradingFeeTokensHeld(param0: Address): BigInt {
    let result = super.call(
      "tradingFeeTokensHeld",
      "tradingFeeTokensHeld(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_tradingFeeTokensHeld(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tradingFeeTokensHeld",
      "tradingFeeTokensHeld(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradingFeeTokensPaid(param0: Address): BigInt {
    let result = super.call(
      "tradingFeeTokensPaid",
      "tradingFeeTokensPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_tradingFeeTokensPaid(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tradingFeeTokensPaid",
      "tradingFeeTokensPaid(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingToLoanPool(param0: Address): Address {
    let result = super.call(
      "underlyingToLoanPool",
      "underlyingToLoanPool(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_underlyingToLoanPool(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingToLoanPool",
      "underlyingToLoanPool(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vbzrxTokenAddress(): Address {
    let result = super.call(
      "vbzrxTokenAddress",
      "vbzrxTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vbzrxTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vbzrxTokenAddress",
      "vbzrxTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wethToken(): Address {
    let result = super.call("wethToken", "wethToken():(address)", []);

    return result[0].toAddress();
  }

  try_wethToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("wethToken", "wethToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ReplaceContractCall extends ethereum.Call {
  get inputs(): ReplaceContractCall__Inputs {
    return new ReplaceContractCall__Inputs(this);
  }

  get outputs(): ReplaceContractCall__Outputs {
    return new ReplaceContractCall__Outputs(this);
  }
}

export class ReplaceContractCall__Inputs {
  _call: ReplaceContractCall;

  constructor(call: ReplaceContractCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReplaceContractCall__Outputs {
  _call: ReplaceContractCall;

  constructor(call: ReplaceContractCall) {
    this._call = call;
  }
}

export class SetTargetsCall extends ethereum.Call {
  get inputs(): SetTargetsCall__Inputs {
    return new SetTargetsCall__Inputs(this);
  }

  get outputs(): SetTargetsCall__Outputs {
    return new SetTargetsCall__Outputs(this);
  }
}

export class SetTargetsCall__Inputs {
  _call: SetTargetsCall;

  constructor(call: SetTargetsCall) {
    this._call = call;
  }

  get sigsArr(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get targetsArr(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetTargetsCall__Outputs {
  _call: SetTargetsCall;

  constructor(call: SetTargetsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
